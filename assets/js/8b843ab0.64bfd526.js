"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[8811],{39657:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var t=s(74848),i=s(28453);const r={sidebar_position:7,title:"TypeScript Interfaces and Types",description:"Complete documentation of all TypeScript interfaces, types, and data structures in the Mental Health Literacy App"},a="TypeScript Interfaces and Types Documentation",o={id:"api-specification/interfaces-types",title:"TypeScript Interfaces and Types",description:"Complete documentation of all TypeScript interfaces, types, and data structures in the Mental Health Literacy App",source:"@site/docs/api-specification/interfaces-types.md",sourceDirName:"api-specification",slug:"/api-specification/interfaces-types",permalink:"/project-mentalhealthliteracyapp/docs/api-specification/interfaces-types",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2025-Spring/project-mentalhealthliteracyapp/edit/main/documentation/docs/api-specification/interfaces-types.md",tags:[],version:"current",lastUpdatedBy:"GustavoBenitez1",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"TypeScript Interfaces and Types",description:"Complete documentation of all TypeScript interfaces, types, and data structures in the Mental Health Literacy App"},sidebar:"docsSidebar",previous:{title:"Services and Utilities API",permalink:"/project-mentalhealthliteracyapp/docs/api-specification/services-api"},next:{title:"Test Procedures",permalink:"/project-mentalhealthliteracyapp/docs/category/test-procedures"}},d={},c=[{value:"Overview",id:"overview",level:2},{value:"Core Interfaces",id:"core-interfaces",level:2},{value:"Comment Interface",id:"comment-interface",level:3},{value:"Video Interface",id:"video-interface",level:3},{value:"RouteDef Interface",id:"routedef-interface",level:3},{value:"Component Props Interfaces",id:"component-props-interfaces",level:2},{value:"VideoCardProps Interface",id:"videocardprops-interface",level:3},{value:"CommentsProps Interface",id:"commentsprops-interface",level:3},{value:"CommentsProps Interface (Extended)",id:"commentsprops-interface-extended",level:3},{value:"Library Types",id:"library-types",level:2},{value:"Supabase Types",id:"supabase-types",level:3},{value:"React Router Types",id:"react-router-types",level:3},{value:"Joyride Types",id:"joyride-types",level:3},{value:"Type Aliases and Enums",id:"type-aliases-and-enums",level:2},{value:"Authentication States (Planned)",id:"authentication-states-planned",level:3},{value:"Content Types (Planned)",id:"content-types-planned",level:3},{value:"Utility Types",id:"utility-types",level:2},{value:"API Response Types (Planned)",id:"api-response-types-planned",level:3},{value:"Form Types (Planned)",id:"form-types-planned",level:3},{value:"Data Validation Schemas (Future)",id:"data-validation-schemas-future",level:2},{value:"Using a validation library like Zod:",id:"using-a-validation-library-like-zod",level:3},{value:"Type Guards",id:"type-guards",level:2},{value:"Example Type Guards",id:"example-type-guards",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Migration Guide",id:"migration-guide",level:2},{value:"Type Dependencies Graph",id:"type-dependencies-graph",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"typescript-interfaces-and-types-documentation",children:"TypeScript Interfaces and Types Documentation"}),"\n",(0,t.jsx)(n.p,{children:"This document provides comprehensive documentation for all TypeScript interfaces, types, and data structures used throughout the Mental Health Literacy application."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The Mental Health Literacy App leverages TypeScript for type safety and better developer experience. This document catalogs all custom types, interfaces, and data structures used across the application."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"core-interfaces",children:"Core Interfaces"}),"\n",(0,t.jsx)(n.h3,{id:"comment-interface",children:"Comment Interface"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Location"}),": Used in ",(0,t.jsx)(n.code,{children:"VideoCard.tsx"}),", ",(0,t.jsx)(n.code,{children:"Comments.tsx"}),", ",(0,t.jsx)(n.code,{children:"Video.tsx"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Comment {\n  username: string;    // Display name of the comment author\n  text: string;        // The comment content\n  timestamp?: string;  // Optional timestamp (used in VideoCard)\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Represents a user comment on content items."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Usage"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Store and display user comments"}),"\n",(0,t.jsx)(n.li,{children:"Pass comment data between components"}),"\n",(0,t.jsx)(n.li,{children:"Maintain comment history"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Validation Rules"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"username"})," must not be empty"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"text"})," must not be empty after trimming whitespace"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"timestamp"})," should be in ISO 8601 format if provided"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"video-interface",children:"Video Interface"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Location"}),": ",(0,t.jsx)(n.code,{children:"Video.tsx"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Video {\n  id: number;                  // Unique identifier for the video\n  playbackId?: string;         // Mux playback ID for streaming\n  videoUrl?: string;           // Direct URL to video file\n  imageUrl?: string;           // URL to static image content\n  username: string;            // Content creator's username\n  description: string;         // Video description/caption\n  likes: number;               // Number of likes\n  comments: Comment[];         // Array of associated comments\n  isLiked?: boolean;          // Current user's like status\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Represents a content item in the video feed."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Business Rules"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Must have at least one media source (",(0,t.jsx)(n.code,{children:"playbackId"}),", ",(0,t.jsx)(n.code,{children:"videoUrl"}),", or ",(0,t.jsx)(n.code,{children:"imageUrl"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"id"})," must be unique across all videos"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"likes"})," cannot be negative"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"comments"})," array can be empty but not null"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"routedef-interface",children:"RouteDef Interface"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Location"}),": ",(0,t.jsx)(n.code,{children:"Pages.tsx"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'export interface RouteDef {\n  path: string;        // URL path for the route (e.g., "/", "/video")\n  element: JSX.Element; // React component to render at this route\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Defines the structure for route configuration objects."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Constraints"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"path"})," must be a valid URL path"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"path"}),' should start with "/"']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"element"})," must be a valid React component"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"component-props-interfaces",children:"Component Props Interfaces"}),"\n",(0,t.jsx)(n.h3,{id:"videocardprops-interface",children:"VideoCardProps Interface"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Location"}),": ",(0,t.jsx)(n.code,{children:"VideoCard.tsx"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface VideoCardProps {\n  videoUrl?: string;              // Direct video file URL\n  playbackId?: string;            // Mux video playback ID\n  imageUrl?: string;              // Static image URL\n  username: string;               // Creator's username (required)\n  description: string;            // Content description (required)\n  likes: number;                  // Initial like count\n  initialComments: Comment[];     // Pre-existing comments\n  isActive?: boolean;             // Whether card is currently visible\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Props for the VideoCard component."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Validation"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"At least one media prop must be provided"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"likes"})," must be a non-negative integer"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isActive"})," defaults to ",(0,t.jsx)(n.code,{children:"false"})," if not provided"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"commentsprops-interface",children:"CommentsProps Interface"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Location"}),": ",(0,t.jsx)(n.code,{children:"Comments.tsx"})," (standalone version)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface CommentsProps {\n  comments: Comment[];                      // Array of existing comments\n  onAddComment: (comment: Comment) => void; // Callback for new comments\n  onClose: () => void;                     // Callback to close panel\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Props for the standalone Comments component."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"commentsprops-interface-extended",children:"CommentsProps Interface (Extended)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Location"}),": ",(0,t.jsx)(n.code,{children:"VideoCard.tsx"})," (embedded version)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface CommentsProps {\n  comments: Comment[];                      // Array of existing comments\n  onAddComment: (comment: Comment) => void; // Callback for new comments\n  onClose: () => void;                     // Callback to close panel\n  isOpen: boolean;                          // Panel visibility state\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Props for the embedded Comments component with visibility control."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"library-types",children:"Library Types"}),"\n",(0,t.jsx)(n.h3,{id:"supabase-types",children:"Supabase Types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { SupabaseClient } from '@supabase/supabase-js';\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Type definitions for Supabase client operations."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"react-router-types",children:"React Router Types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import type { FormEvent } from "react";\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Standard React event types for form handling."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"joyride-types",children:"Joyride Types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import type { Step, CallBackProps } from "react-joyride";\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Types for the tutorial walkthrough functionality."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"type-aliases-and-enums",children:"Type Aliases and Enums"}),"\n",(0,t.jsx)(n.h3,{id:"authentication-states-planned",children:"Authentication States (Planned)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"type AuthState = 'authenticated' | 'unauthenticated' | 'loading' | 'error';\n\nenum UserRole {\n  GUEST = 'guest',\n  USER = 'user',\n  MODERATOR = 'moderator',\n  ADMIN = 'admin'\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"content-types-planned",children:"Content Types (Planned)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"type MediaType = 'video' | 'image' | 'mux-video';\n\ntype ContentCategory = 'anxiety' | 'depression' | 'stress' | 'general' | 'wellness';\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"utility-types",children:"Utility Types"}),"\n",(0,t.jsx)(n.h3,{id:"api-response-types-planned",children:"API Response Types (Planned)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface ApiResponse<T> {\n  data?: T;\n  error?: string;\n  status: number;\n  timestamp: string;\n}\n\ninterface PaginatedResponse<T> {\n  items: T[];\n  total: number;\n  page: number;\n  pageSize: number;\n  hasNext: boolean;\n  hasPrevious: boolean;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"form-types-planned",children:"Form Types (Planned)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface LoginFormData {\n  email: string;\n  password: string;\n}\n\ninterface SignUpFormData extends LoginFormData {\n  displayName: string;\n  agreeToTerms?: boolean;\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"data-validation-schemas-future",children:"Data Validation Schemas (Future)"}),"\n",(0,t.jsx)(n.h3,{id:"using-a-validation-library-like-zod",children:"Using a validation library like Zod:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { z } from 'zod';\n\nconst CommentSchema = z.object({\n  username: z.string().min(1).max(50),\n  text: z.string().min(1).max(500),\n  timestamp: z.string().datetime().optional()\n});\n\nconst VideoSchema = z.object({\n  id: z.number().positive(),\n  playbackId: z.string().optional(),\n  videoUrl: z.string().url().optional(),\n  imageUrl: z.string().url().optional(),\n  username: z.string().min(1),\n  description: z.string().max(200),\n  likes: z.number().nonnegative(),\n  comments: z.array(CommentSchema)\n}).refine(\n  (data) => data.playbackId || data.videoUrl || data.imageUrl,\n  { message: \"At least one media source must be provided\" }\n);\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"type-guards",children:"Type Guards"}),"\n",(0,t.jsx)(n.h3,{id:"example-type-guards",children:"Example Type Guards"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Check if a media source is available\nfunction hasMediaSource(video: Video): boolean {\n  return !!(video.playbackId || video.videoUrl || video.imageUrl);\n}\n\n// Type guard for Comment\nfunction isValidComment(obj: any): obj is Comment {\n  return (\n    typeof obj === 'object' &&\n    typeof obj.username === 'string' &&\n    typeof obj.text === 'string' &&\n    (obj.timestamp === undefined || typeof obj.timestamp === 'string')\n  );\n}\n\n// Type guard for authenticated user\nfunction isAuthenticated(user: any): user is AuthenticatedUser {\n  return user && user.id && user.email;\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Interface Naming"}),": Use PascalCase and descriptive names"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Optional Properties"}),": Mark with ",(0,t.jsx)(n.code,{children:"?"})," only when truly optional"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"}),": Add JSDoc comments for complex types"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Immutability"}),": Consider using ",(0,t.jsx)(n.code,{children:"readonly"})," for props"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type Exports"}),": Export interfaces that are used across files"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Avoid ",(0,t.jsx)(n.code,{children:"any"})]}),": Use ",(0,t.jsx)(n.code,{children:"unknown"})," or specific types instead"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,t.jsx)(n.p,{children:"When adding new types:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Define the interface in the appropriate location"}),"\n",(0,t.jsx)(n.li,{children:"Add validation if dealing with external data"}),"\n",(0,t.jsx)(n.li,{children:"Create type guards for runtime checks"}),"\n",(0,t.jsx)(n.li,{children:"Update this documentation"}),"\n",(0,t.jsx)(n.li,{children:"Consider backward compatibility"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"type-dependencies-graph",children:"Type Dependencies Graph"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Comment\n  \u2514\u2500\u2500 Used by: Video, VideoCardProps, CommentsProps\n\nVideo\n  \u2514\u2500\u2500 Uses: Comment\n  \u2514\u2500\u2500 Used by: Video.tsx page\n\nRouteDef\n  \u2514\u2500\u2500 Used by: Pages.tsx, routing system\n\nVideoCardProps\n  \u2514\u2500\u2500 Uses: Comment\n  \u2514\u2500\u2500 Used by: VideoCard component\n\nCommentsProps\n  \u2514\u2500\u2500 Uses: Comment\n  \u2514\u2500\u2500 Used by: Comments component\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(96540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);